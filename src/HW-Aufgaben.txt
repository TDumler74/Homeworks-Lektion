
Lesson 2
Напишите программу, которая выводит на экран информацию о вас (или выдуманном персонаже) в три строчки:

"Меня зовут ..."
"Мне ... лет"
"Я из ..."
 На месте многоточий должны использоваться переменные!

 Lesson 3
 Напишите программу — простого бота, который задаёт вам вопросы и использует ваши ответы.

 В программе должно быть не меньше трёх вопросов.

 Как минимум один ответ нужно читать и использовать, как число.

 Lesson 4
 Задача 1
 Написать программу для вычисления площади прямоугольника.
 Получить через ввод длину и ширину и вывести площадь.

 Задача 2
 Написать программу для вычисления скорости.
  Получить на вход время пути и расстояние и вывести скорость.

 Задача 3* (не обязательно)
 Написать программу для вычисления средней стомости поездки
 по проездному. Попросить ввести стоимость проездного на месяц
  и количество рабочих дней.

 Считая, что в рабочий день в среднем две поездки, и 1.5 поездки
  в выходной, посчитать и округлить общее число поездок в месяц и
  посчитать среднюю стоимость одной поездки по проездному.

  Lesson 5

  Задача 1
  Обновить программу для вычисления площади прямоугольника.
  Добавить вывод единиц измерения через символ Unicode.

  Задача 2
  Написать программу, которая считывает с клавиатуры пять
  символов и выводит их коды.

  Lesson 6
  Задача 1
  Напишите программу, которая считывает три числа и выводит их сумму.
   Каждое число записано в отдельной строке.

   Lesson 7
   Задача 1
   Напишите программу, которая читает строку, и выводит её длину, первый и последний символы.

   Задача 2
   Напишите программу, которая читает строку, левый индекс и правый индекс и выводит
   получившуюся подстроку.

   Задача 3* (не обязательно)
   Перепишите домашнюю работу про символы (задание 2 урока 5) с использованием
   форматированного вывода.

   Лессон 8
   Задача 1
   Напишите программу, в которой пользователь вводит с клавиатуры целое число, а программа ему рассказывает,
   отрицательное это число, положительное или нулевое, и делится ли оно на три.

    Lesson 9
    Задача 1
    Напишите программу, в которой пользователь вводит с клавиатуры целое число, а программа ему рассказывает, отрицательное это число, положительное или ноль, и делится ли оно на три.

    Использовать if ... else и из трёх вариантов (отрицательное, положительное или ноль) вывести только один.

    Задача 2* (не обязательно)
    Напишите программу, которая получает на вход целое число от 0 до 999 и должна определить, сколько в нём цифр — 1, 2 или 3 (делать через else if).

    Напишите условие-стражник (два независимых стражника) для проверки ввода: если слишком маленькое и если слишком большое.


    Lesson 10
    Задача 1
    Написать простого бота, который задаёт три вопроса. Сделать его ответы разными — использовать if ... else и сравнение строк.


    Lesson 11
    Задача 1
    Написать программу, в которую вводится имя и фамилия пользователя в одну строку через пробел.

    Программа должна выводить имя и фамилию на разных строках.

    Подсказка: см. файл IP.java

    Задача 2* (не обязательно)
    В задачу 1 добавить возможность вводить отчество. Подсказка: проверяйте количество найденных пробелов.

    Lesson 12
    Задача 1
    Красный, синий и желтый называются основными цветами, потому что их нельзя получить путем смешения других цветов. При смешивании двух основных цветов получается вторичный цвет:

    если смешать красный и синий, то получится фиолетовый;
    если смешать красный и желтый, то получится оранжевый;
    если смешать синий и желтый, то получится зеленый.
    Напишите программу, которая считывает названия двух основных цветов для смешивания. Если пользователь вводит что-нибудь помимо названий «красный», «синий» или «желтый», то программа должна вывести сообщение об ошибке. В противном случае программа должна вывести название вторичного цвета, который получится в результате.

    Формат входных данных
    На вход программе подаются две строки, каждая на отдельной строке.

    Формат выходных данных
    Программа должна вывести полученный цвет смешения либо сообщение «ошибка цвета», если введён был не цвет.

    Примечание
    Если смешать красный и красный, то получится красный.


    Lesson 13
    Задача 1
    Напишите программу, которая принимает три положительных числа и определяет, существует ли невырожденный треугольник с такими сторонами.

    Формат входных данных
    На вход программе подаётся три положительных целых числа.

    Формат выходных данных
    Программа должна вывести «YES» или «NO» в соответствии с условием задачи.

    Примечание.
    Треугольник существует, если выполняется неравенство треугольника.

    Задача 2* (не обязательно)
    Даны две различные клетки шахматной доски. Напишите программу, которая определяет, может ли король попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом короля можно попасть во вторую, или «NO» в противном случае.

    Формат входных данных
    На вход программе подаётся четыре числа от 1 до 8.

    Формат выходных данных
    Программа должна вывести текст в соответствии с условием задачи.

    Примечание
    Шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку.

    Lesson 14
    Задача 1
    Программа получает на вход строку и число повторений этой строки и должна вывести эту же строку нужно количество раз.

    Формат входных данных
    На вход программе подается две строки: строка, которую нужно повторять; натуральное число — количество повторений.

    Формат выходных данных
    Программа должна вывести нужное количество одинаковых строк.

    Задача 2*
    В первый день спортсмен пробежал s километров, а затем он каждый день увеличивал пробег на 10 % от предыдущего значения. Определите номер дня, на который пробег спортсмена составит не менее target километров.

    Программа получает на вход действительные числа s и target и должна вывести одно натуральное число.

    Задача 3* (не обязательно)
    Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака существуют монеты с номиналами 1, 5, 10, 25.

    Напишите программу, которая определяет, какое минимальное количество чеканных монет нужно заплатить ведьмаку.

    Формат входных данных
    На вход программе подается одно натуральное число, цена за услугу ведьмака.

    Формат выходных данных
    Программа должна вывести минимально возможное количество чеканных монет для оплаты.

    Задача 4* (не обязательно)
    Заданы две клетки шахматной доски. Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».

    Формат входных данных
    На вход программе подаётся четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.

    Формат выходных данных
    Программа должна вывести текст в соответствии с условием задачи.

    Lesson 15
    Задача 1.
    Даны два целых числа: m и n (m > n). Напишите программу, которая выводит все нечётные числа от m до n включительно в порядке убывания.

    Формат входных данных
    На вход программе подаются два целых числаm и n, каждое на отдельной строке.

    Формат выходных данных
    Программа должна вывести числа в соответствии с условием задачи.

    Задача 2* (не обязательно)
    Дано натуральное число n. Напишите программу, которая выводит равнобедренный прямоугольный треугольник с катетами длиной n из звёздочек.

    Формат входных данных
    На вход программе подается натуральное число.

    Пример вывода
    Для n = 4:

    *
    **
    ***
    ****
    Задача 3* (не обязательно, можно задачу 4 вместо неё)
    Дано натуральное число n. Напишите программу, которая выводит таблицу умножения на n.

    Формат входных данных
    На вход программе подается натуральное число.

    Примечание
    В качестве знака умножения используйте английскую букву x.

    Пример вывода
    Для n = 5:

    5 x 1 = 5
    5 x 2 = 10
    5 x 3 = 15
    5 x 4 = 20
    5 x 5 = 25
    5 x 6 = 30
    5 x 7 = 35
    5 x 8 = 40
    5 x 9 = 45
    5 x 10 = 50
    Задача 4** (не обязательно, вместо задачи 3)
    Напишите программу, которая выводит таблицу умножения для всех чисел от 1 до 10.

    Примечание
    В качестве знака умножения используйте английскую букву x.

    Формат вывода
    Вывод аналогичен задаче 3.

    Lesson 16
    Задача 1.
    На вход программе подается натуральное число n. Напишите программу, которая выводит числа от 1 до n включительно за исключением чисел от 5 до 19 включительно.

    Формат входных данных
    На вход программе подается одно натуральное число n.

    Формат выходных данных
    Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.

    Примечание
    Используйте оператор continue!

    Задача 2* (не обязательно)
    Даны два натуральное числа — ширина и высота прямоугольника. Напишите программу, которая выводит прямоугольную "рамочку" заданного размера.

    Формат входных данных
    На вход программе подаётся два натуральных числа, каждое на отдельной строке, сначала ширина, затем высота.

    Пример вывода
    Для чисел 6 и 4:

    ******
    *    *
    *    *
    ******

    Lesson 17
    Задача 1
    На вход программе подается натуральное число n - количество чисел, а затем и сами числа, каждое с новой строки. Напишите программу, которая прочитает эти числа, сохранит в массив, а затем выведет только чётные элементы массива.

    Задача 2* (не обязательно)
    На улице Чёткой — разборки. Чётная и нечётная стороны разбираются, кто круче, и полным составом, включая грудничков, выходят стенка на стенку. Определим, у какой стороны выше шанс на победу (больше жителей — выше шанс).

    Формат входных данных
    В первой строке находится число n - количество домов на улице. В последующих n строках — количество жителей в каждом доме (по порядку). Нумерация домов начинается с единицы.

    Формат вывода
    в первой строке выведите количество жителей на нечётной стороне улицы,
    во второй строке — количество жителей на чётной стороне улицы,
    в третьй — одно слово, обозначающее сторону-победителя: чётная или нечётная.
    Пояснение
    Предположим, что на улице 5 домов.

    Ввод:

    5
    1
    4
    2
    6
    5
    Это означает, что всегдо домов — 5, в первом доме 1 житель, во втором — 4, в третьем — 2, в четвёртом — 6, в пятом - 5.

    В домах на нечётной стороне живут (1 + 2 + 5 = 8) жителей.

    В домах на чётной стороне живут (4 + 6 = 10) жителей.

    Победила чётная сторона.

    Вывод:
    8
    10
    чётная
    Задача 3* (не обязательно)
    На вход подаётся чётное число n - количество чисел, а затем и сами числа.

    Необходимо разложить этот массив на две "половинки" — в два массива, каждый из которых в два раза меньше, в порядке очереди (первый-второй-первый-второй...).

    Программа должна вывести элементы двух получившихся маленьких массивов и пустую строку между ними.

    Lesson 18
    Задача 1
    Я по три раза по три раза по три раза не повторяю не повторяю не повторяю. Вы уже догадались, какое вас ждет задание? Если нет, то вот оно:

    Реализуйте метод repeatLine, который:

    получает в качестве аргументов:
    строку,
    количество повторений;
    выводит переданную строку или слово на экран указанное количество раз, причём в одной строке через пробелы;
    ничего не возвращает.
    Задача 2* (не обязательно)
    Ты знал, что сила тяжести на Луне составляет примерно 17% от силы тяжести на Земле? — Нет. — Вот и я не знал. А теперь этой информацией нужно пользоваться часто!

    Чтобы не считать каждый раз, реализуй метод getWeight(int), который принимает вес тела (в Ньютонах) на Земле, и возвращает, сколько это тело будет весить на Луне (в Ньютонах).

    Тип возвращаемого значения — double.

    Lesson 19
    Задача 1
    Напиши метод checkInterval. Метод должен проверять попало ли целое число в интервал от 50 до 100 и сообщить результат на экран в следующем виде: "Число number не содержится в интервале." или "Число number содержится в интервале.", где number — аргумент метода.

    Пример для числа 112:

    Число 112 не содержится в интервале.
    Пример для числа 60:

    Число 60 содержится в интервале.
    Задача 2* (не обязательно)
    Даны три целых числа.

    Определите, сколько среди них совпадающих.

    Программа должна вывести одно из чисел:

    3 (если все совпадают),
    2 (если два совпадает) или
    0 (если все числа различны).
    Задача 3** (не обязательно)
    Шоколадка имеет вид прямоугольника, разделенного на n×m долек.

    Шоколадку можно один раз разломить по прямой на две части.

    Определите, можно ли таким образом отломить от шоколадки часть, состоящую ровно из k долек.

    Программа получает на вход три числа: n, m, k и должна вывести YES или NO.

    Задача 4** (не обязательно)
    Шахматный конь ходит буквой “Г” — на две клетки по вертикали в любом направлении и на одну клетку по горизонтали, или наоборот.

    Даны две различные клетки шахматной доски, определите, может ли конь попасть с первой клетки на вторую одним ходом.

    Задача 5** (не обязательно)
    С начала суток часовая стрелка повернулась на угол в α градусов.

    Определите на какой угол повернулась минутная стрелка с начала последнего часа. Входные и выходные данные — действительные числа.

    Lesson 20
    Задача 0
    Дописать программу Triangle

    Задача 1
    Прочитать размер массива строк.
    Прочитать элементы массива.
    Вывести элементы массива в обратном порядке (от последнего к первому).
    Примечание
    Обязательно использовать отладочный вывод. Желательно использовать методы.

    Задача 2* (не обязательно)
    Прочитать размер массива целых чисел.
    Прочитать элементы массива.
    Посчитать и вывести все элементы, которые больше предыдущего элемента.
    Пример ввода:
    5
    1
    5
    2
    4
    3
    Пример вывода
    5
    4
    Пояснение
    Элемент 5 больше предыдущего элемента 1.
    Элемент 4 больше предыдущего элемента 2.
    Примечание
    Использовать метод(ы) и отладочный вывод.

    Lesson 21
    Задача 1
    Напишите программу, которая получает на вход:

    размер списка имён
    список имён
    номер имени, которое надо вывести
    И выводит соответствующее имя или сообщение об ошибке при некорректном вводе.

    Сообщение об ошибке надо вывести через try-catch, самостоятельно проверять ввод на корректность номера не нужно.

    Пример ввода
    3
    Антон
    Борис
    Василий
    2
    Пример вывода
    Борис
    Задача 2* (не обязательно)
    Дан размер списка целых чисел, а затем и сам список чисел, каждое число с новой строки.

    Обработайте ошибки формата ввода NumberFormatException - завершите программу с красивым сообщением об ошибке

    Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов.

    Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.

    Задача 3** (не обязательно)
    Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.

    Программа получает на вход: Размер последовательности; Саму невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю.

    После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.

    Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них.

    Пример ввода
    8
    165
    163
    160
    160
    157
    157
    155
    154
    162
    Пример вывода
    3
    Пояснение
    8 человек уже стоит в шеренге: 165 163 160 160 157 157 155 154;
    рост Пети - 162;
    Петя должен встать третьим, после людей с ростом 165 и 163.
    Задача 4*** (не обязательно)
    N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N. Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли с номерами от li до ri включительно. Определите, какие кегли остались стоять на месте.

    Программа получает на вход количество кеглей N и количество бросков K. Далее идет K пар чисел li, ri, при этом 1 ≤ li ≤ ri ≤ N.

    Каждое число вводится с новой строки.

    Программа должна вывести последовательность из N символов, где j-й символ есть “I”, если j-я кегля осталась стоять, или “.”, если j-я кегля была сбита.

    Пример ввода
    10
    3
    8
    10
    2
    5
    3
    6
    Пример вывода
    I.....I...
    Пояснение
    10 кеглей;
    3 броска;
    первый бросок сбил кегли с 8 по 10: IIIIIII...;
    второй бросок сбил кегли со 2 по 5: I...II...;
    третий бросок сбил кегли с 3 по 6 (повторно сбить кегли не получится, но это не считается ошибкой): I....I....

    Lesson 22
    Важное замечание
    Все задачи надо решить с использованием ArrayList. В задачах со звёздочками необходимо обработать возможные исключения.

    Задача 1
    На вход программе подается натуральное число n - количество чисел, а затем и сами числа, каждое с новой строки. Напишите программу, которая прочитает эти числа, сохранит в список, а затем выведет только чётные элементы списка.

    Задача 2* (не обязательно)
    На улице Чёткой — разборки. Чётная и нечётная стороны разбираются, кто круче, и полным составом, включая грудничков, выходят стенка на стенку. Определим, у какой стороны выше шанс на победу (больше жителей — выше шанс).

    Формат входных данных
    В первой строке находится число n - количество домов на улице. В последующих n строках — количество жителей в каждом доме (по порядку). Нумерация домов начинается с единицы.

    Формат вывода
    в первой строке выведите количество жителей на нечётной стороне улицы,
    во второй строке — количество жителей на чётной стороне улицы,
    в третьй — одно слово, обозначающее сторону-победителя: чётная или нечётная.
    Пояснение
    Предположим, что на улице 5 домов.

    Ввод:

    5
    1
    4
    2
    6
    5
    Это означает, что всегдо домов — 5, в первом доме 1 житель, во втором — 4, в третьем — 2, в четвёртом — 6, в пятом - 5.

    В домах на нечётной стороне живут (1 + 2 + 5 = 8) жителей.

    В домах на чётной стороне живут (4 + 6 = 10) жителей.

    Победила чётная сторона.

    Вывод:

    8
    10
    чётная
    Задача 3* (не обязательно)
    На вход подаётся чётное число n - количество чисел, а затем и сами числа.

    Необходимо разложить этот список на две "половинки" — в два списка, каждый из которых в два раза меньше, в порядке очереди (первый-второй-первый-второй...).

    Программа должна вывести элементы двух получившихся маленьких списков и пустую строку между ними.

    Lesson 23
    Задача 1
    Напишите программу, которая:

    прочитает размер списка
    будет добавлять элементы в список, но каждый раз в начало, а не в конец списка, как обычно
    выведет получившийся список
    Задача 2* (не обязательно)
    Напишите программу, которая:

    прочитает размер списка
    прочитает элементы списка
    выведет прочитанный список
    "перевернёт" элементы (поменяет местами первый с последним, второй с предпоследним и т.д.)
    выведет изменённый список
    Задача 3**** (не обязательно)
    Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.

    Программа получает на вход восемь пар чисел, каждое число от 1 до 8 — координаты 8 ферзей. Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

    Lesson 24
    Задача 1 (ToDoList)
    Написать метод

    public static void addRecord(List<String> records) {
      System.out.println("Добавляем запись\n"); // отладочный вывод
    }
    Метод должен прочитать строку и добавить её в конец списка records.

    Задача 2 (ToDoList)
    Написать метод

    public static void printRecords(List<String> records) {
      System.out.println("Смотрим записи\n"); // отладочный вывод
    }
    Метод должен вывести все записи из готового списка records, каждую в новой строке, и пронумеровать записи, начиная с единицы.

    Заполнять список в этой задаче не надо!

    Пример вывода
    1. Повторить теорию
    2. Сделать домашнее задание
    3. Отправить задачи на проверку
    Задача 3* (ToDoList)
    Написать метод

    public static void removeRecord(List<String> records) {
      System.out.println("Удаляем запись\n"); // отладочный вывод
    }
    Метод должен прочитать номер записи (нумерация начинается с единицы) и удалить запись с таким номером из списка records.

    Заполнять список в этой задаче не надо!

    Примечание
    Воспользуйтесь методом список.remove(индекс).

    Задача 4*** (не обязательно)
    Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.

    Lesson 25
    Задача 1
    Написать программу, которая:

    прочитает с клавиатуры количество чисел
    прочитает с клавиатуры сами числа и соберёт их в множество
    удалит из множества числа, большие 10
    выведет полученные результаты на экран
    Все числа, которые подаются на вход, целые.

    Задача 2* (не обязательно)
    Даны два списка целых чисел. Посчитайте, сколько чисел содержится одновременно как в первом списке, так и во втором.

    Для каждого списка программе на вход подаётся сначала количество чисел, а затем и сами числа, каждое в новой строке.

    Используйте множества.

    Примечание
    При желании прочитайте про метод (https://docs.oracle.com/javase/6/docs/api/java/util/Set.html#retainAll%28java.util.Collection%29)[retainAll] и используйте его.

    Задача 3** (не обязательно)
    Аня и Боря любят играть в разноцветные кубики, причем у каждого из них свой набор и в каждом наборе все кубики различны по цвету. Однажды дети заинтересовались, сколько существуют цветов таких, что кубики каждого цвета присутствуют в обоих наборах. Для этого они занумеровали все цвета случайными числами от 0 до 108. На этом их энтузиазм иссяк, поэтому вам предлагается помочь им в оставшейся части.

    В первой строке входных данных записаны числа N и M — число кубиков у Ани и Бори. В следующих N строках заданы номера цветов кубиков Ани. В последних M строках номера цветов Бори.

    Найдите три множества: номера цветов кубиков, которые есть в обоих наборах; номера цветов кубиков, которые есть только у Ани и номера цветов кубиков, которые есть только у Бори. Для каждого из множеств выведите сначала количество элементов в нем, а затем сами элементы, отсортированные по возрастанию.

    Пример ввода
    4
    3
    0
    1
    10
    9
    1
    3
    0
    Пример вывода
    2
    0 1
    2
    9 10
    1
    3
    Пояснение
    У Ани 4 кубика, у Бори - 3.

    Кубики в наборе Ани:

    0
    1
    10
    9
    Кубики в наборе Бори:

    1
    3
    0
    Кубики, которые есть в обоих наборах (всего 2):

    0
    1
    Кубики, которые есть только у Ани (всего 2):

    10
    9
    Кубики, которые есть только у Бори (всего 1):

    3
    Примечание
    Прочитайте про метод (https://docs.oracle.com/javase/6/docs/api/java/util/Set.html#retainAll(java.util.Collection))[retainAll] и используйте его.

    Используйте также метод (https://docs.oracle.com/javase/6/docs/api/java/util/Set.html#removeAll(java.util.Collection))[removeAll].

    Lesson 26
    Задача 1
    Вам дан словарь, состоящий из пар слов. Каждое слово является синонимом к парному ему слову. Все слова в словаре различны.

    Для слова из словаря, записанного в последней строке, определите его синоним.

    Формат ввода
    в первой строке - количество записей в словаре
    в следующих строках - сами записи: первое слово (ключ) и второе слово (синоним), каждое слово в отдельной строке
    в последней строке - слово, синоним для которого нужно вывести
    Пример ввода
    3
    Hello
    Hi
    Bye
    Goodbye
    List
    Array
    Goodbye
    Пример вывода
    Bye
    Задача 2* (не обязательно)
    Создать словарь (Map<String, String>) занести в него записи по принципу "фамилия" - "имя".

    Сначало количество записей, а потом фамилию и имя для каждой записи прочитать с клавиатуры.

    Фамилия и имя будут расположены в одной строке через пробел, необходимо воспользоваться методами строк (String): substring() и indexOf().

    Удалить людей, имеющих одинаковые имена.

    Вывести содержимое словаря (после удаления) на экран.

    Lesson 27

    Lesson 28

    Lesson 29
    Задача 1
    Написать программу, которая:

    читает с клавиатуры одну строку
    считает количество разных символов (с учётом повторений) в этой строке
    выводит частоту букв (порядок букв при выводе не важен)
    Подсказка
    Для перебора символов используйте:

    цикл for по индексам от 0 до строка.length()
    метод строка.charAt(индекс)
    Образец счётчика есть в задаче Счётчик слов урока 26.

    Пример ввода
    hello
    Пример вывода
    h: 1
    e: 1
    l: 2
    o: 1
    Задача 2
    Вам доступен список pets, содержащий информацию о собаках и их владельцах. Каждый элемент списка – это словарь вида

    {
      "dog": "кличка собаки",
      "owner": "имя владельца"
    }
    Напишите метод

    public static Map<String, List<String>> getPetsByOwner(List<Map<String, String>> pets)
    возвращающий словарь, в котором для каждого владельца будут перечислены его собаки.

    Ключом словаря должно быть имя владельца, а значением - список кличек собак:

    {
      "имя первого владельца": ["кличка первой собаки", "кличка второй собаки"],
      "имя второго владельца": ["кличка третьей собаки"]
    }
    Пример входных данных
    [
      {
        "dog": "Hatiko",
        "owner": "Parker Wilson"
      },
      {
        "dog": "Rusty",
        "owner": "Josh King"
      },
      {
        "dog": "Balto",
        "owner": "Josh King"
      }
    ]
    Пример выходных данных
    {
      "Parker Wilson": [
        "Hatiko"
      ],
      "Josh King": [
        "Rusty",
        "Balto"
      ]
    }
    Задача 3* (не обязательно)
    Код Морзе для представления цифр и букв использует тире и точки.

    Напишите программу для кодирования текстового сообщения в соответствии с кодом Морзе.

    Символ	Код	Символ	Код	Символ	Код	Символ	Код
    A	.-	J	.---	S	...	1	.----
    B	-...	K	-.-	T	-	2	..---
    C	-.-.	L	.-..	U	..-	3	...--
    D	-..	M	--	V	...-	4	....-
    E	.	N	-.	W	.--	5	.....
    F	..-.	O	---	X	-..-	6	-....
    G	--.	P	.--.	Y	-.--	7	--...
    H	....	Q	--.-	Z	--..	8	---..
    I	..	R	.-.	0	-----	9	----.
    Задача 4* (не обязательно)
    На мобильных кнопочных телефонах текстовые сообщения можно отправлять с помощью цифровой клавиатуры. Поскольку с каждой клавишей связано несколько букв, для большинства букв требуется несколько нажатий клавиш.

    При однократном нажатии цифры генерируется первый символ, указанный для этой клавиши. Нажатие цифры 2,3,4 или 5 раз генерирует второй, третий, четвертый или пятый символ клавиши.

    Клавиша	Символы
    1	.,?!:
    2	ABC
    3	DEF
    4	GHI
    5	JKL
    6	MNO
    7	PQRS
    8	TUV
    9	WXYZ
    0	space (пробел)
    Напишите программу, которая отображает нажатия клавиш, необходимые для введенного сообщения.

    Формат входных данных
    На вход программе подается одна строка – текстовое сообщение.

    Формат выходных данных
    Программа должна вывести нажатия клавиш, необходимых для введенного сообщения.

    Пример входных данных
    Hello, World!
    Пример выходных данных
    4433555555666110966677755531111
    Примечание 1. Ваша программа должна обрабатывать как прописные, так и строчные буквы.

    Примечание 2. Ваша программа должна игнорировать любые символы, не указанные в приведенной выше таблице.

    Задача 5** (не обязательно)
    Анаграмма – слово (словосочетание), образованное путём перестановки букв, составляющих другое слово (или словосочетание). Например, английские слова evil и live – это анаграммы.

    На вход программе подаются два слова. Напишите программу, которая определяет, являются ли они анаграммами.

    Формат входных данных
    На вход программе подаются два слова, каждое на отдельной строке.

    Формат выходных данных
    Программа должна вывести YES, если слова являются анаграммами, и NO в противном случае.

    Пример 1
    Пример входных данных
    thing
    night
    Пример выходных данных
    YES
    Пример 2
    Пример входных данных
    cat
    rat
    Пример выходных данных
    NO

    Lesson 30
    Важно
    Во всех задачах для перебора чисел нельзя пользоваться строками.

    Строки как константы использовать можно, если не сказано обратное.

    Задача 1
    Написать метод

    public static String decToBin(int number)
    который получит число и вернёт строку с его двоичной записью.

    Задача 2* (не обязательно)
    Написать метод

    public static int maxDecDigit(int number)
    который получит число и вернёт максимальную цифру этого числа.

    Задача 3* (не обязательно)
    Написать свою версию метода

    public static String decToHex(int number)
    из классной работы с использованием кодов символов (и знанием того, что символы A-F в таблице символов идут подряд).

    Задача 4** (не обязательно)
    Написать метод

    public static String hexToBin(String digits)
    который получит шестнадцатеричную запись числа и вернёт его двоичную запись.

    Задача 5** (не обязательно)
    Написать метод

    public static int parseHexInt(String line)
    который получит строку с шеcтнадцатеричной записью числа и вернёт само число. Методами parse* языка Java в этой задаче пользоваться нельзя!
    Задача 1
    Напишите программу, которая:

    прочитает целое число из файла res/in.txt
    переведёт его в двоичную запись
    запишет его в файл res/out.txt
    Воспользуйтесь методом decToBin(int number) из задачи 1 предыдущего урока или информацией из разбора домашнего задания.

    Задача 2* (не обязательно)
    Усовершенствуйте файл Task5PhoneBook.java из классной работы - вынесите:

    чтение записей,
    добавление новой записи,
    сохранение всех записей в файл в отдельные методы.


 Lesson 31
 Задача 1
 Напишите программу, которая:

 прочитает целое число из файла res/in.txt
 переведёт его в двоичную запись
 запишет его в файл res/out.txt
 Воспользуйтесь методом decToBin(int number) из задачи 1 предыдущего урока или информацией из разбора домашнего задания.

 Задача 2* (не обязательно)
 Усовершенствуйте файл Task5PhoneBook.java из классной работы - вынесите:

 чтение записей,
 добавление новой записи,
 сохранение всех записей в файл в отдельные методы.

 Lesson 32
    Задание 1
    Расширьте программу Task2MonthsEnums. Добавьте ещё один enum, который будет описывать времена года (зима, лето, весна, осень) и укажет, к какому именно времени года относится выбранный месяц.

    Задание 2* (не обязательно)
    Совместите программы Task1Months и Task2MonthsEnums, чтобы число дней в месяце читалось из файла res/months.csv, но сохранялось Map<Month, Integer>.


    Lesson 33
    Важно
    Задания повторяют домашние задания из предыдущего урока.

    В этот раз решения задач нужно предоставить в виде ссылки на репозиторий в GitHub.

    В вашем репозитории должно быть не менее трёх осмысленных коммитов.

     Задание 1
      Расширьте программу Task2MonthsEnums. Добавьте ещё один enum, который будет описывать времена года (зима, лето, весна, осень) и укажет, к какому именно времени года относится выбранный месяц.

      Задание 2* (не обязательно)
      Совместите программы Task1Months и Task2MonthsEnums, чтобы число дней в месяце читалось из файла res/months.csv, но сохранялось Map<Month, Integer>.

    Lesson 34
    Важно
    Во всех задачах разбивайте решение на несколько коммитов:

    условие в комментарии и никакого кода
    решение без учёта файлов - чтение с клавиатуры и вывод на экран
    добавляем файлы, если они указаны в задаче
    разбиваем задачу на методы
    добавляем try..catch
    Задача 1
    Программисты, как вы уже знаете, постоянно учатся, а в общении между собой используют весьма специфический язык. Чтобы систематизировать ваш пополняющийся профессиональный лексикон, мы придумали эту задачу.

    Напишите программу создания небольшого словаря сленговых программерских выражений, чтобы она потом по запросу возвращала значения из этого словаря.

    Формат входных данных
    Файл dict.txt
    В первой строке задано одно целое число n — количество слов в словаре.

    В следующих n строках записаны слова и их определения, разделенные двоеточием и символом пробела.

    Ввод с клавиатуры
    В первой строке записано целое число m — количество поисковых слов, чье определение нужно вывести.

    В следующих m строках записаны сами слова, по одному на строке.

    Формат выходных данных
    Для каждого слова, независимо от регистра символов, если оно присутствует в словаре, необходимо вывести на экран его определение.

    Если слова в словаре нет, программа должна вывести "Не найдено", без кавычек.

    Примечание 1
    Мини-словарь для начинающих разработчиков можно посмотреть тут.

    Примечание 2
    Гарантируется, что в определяемом слове или фразе отсутствует двоеточие (:), следом за которым идёт пробел.

    Пример входных данных
    5
    Змея: язык программирования Python
    Баг: от англ. bug — жучок, клоп, ошибка в программе
    Конфа: конференция
    Костыль: код, который нужен, чтобы исправить несовершенство ранее написанного кода
    Бета: бета-версия, приложение на стадии публичного тестирования
    3
    Змея
    Жаба
    костыль
    Пример выходных данных
    язык программирования Python
    Не найдено
    код, который нужен, чтобы исправить несовершенство ранее написанного кода
    Задача 2** (не обязательно)
    В файловую систему одного суперкомпьютера проник вирус, который сломал контроль за правами доступа к файлам. Для каждого файла известно, с какими действиями можно к нему обращаться:

    запись W,
    чтение R,
    запуск X.
    Файл files.txt
    В первой строке содержится число N — количество файлов, содержащихся в данной файловой системе.

    В следующих N строчках содержатся имена файлов и допустимых с ними операций, разделенные пробелами.

    Файл operations.txt
    Далее указано чиcло M — количество запросов к файлам.

    В последних M строках указан запрос вида Операция Файл.

    К одному и тому же файлу может быть применено любое колличество запросов.

    Вам требуется восстановить контроль над правами доступа к файлам.

    Файл results.txt
    Ваша программа для каждого запроса должна будет выводить Файл: Операция: OK, если над файлом выполняется допустимая операция, или же Файл: Операция: Access denied, если операция недопустима.

    Пример входных данных
    4
    helloworld.exe R X
    pinglog W R
    nya R
    goodluck X W R
    5
    read nya
    write helloworld.exe
    execute nya
    read pinglog
    write pinglog
    Пример выходных данных
    nya: read: OK
    helloworld.exe: write: Access denied
    nya: execute: Access denied
    pinglog: read: OK
    pinglog: write: OK

    Lesson 35

    Lesson 36
    Задача 1
    Создайте класс Soda (для определения типа газированной воды).

    У класса должен быть конструктор, принимающий 1 аргумент при инициализации - строку добавка (например, "малина"), отвечающий за добавку к выбираемому лимонаду.

    В этом классе реализуйте метод public String getMyDrinkString(), возвращающий строку Газировка и {добавка} в случае наличия добавки.

    Если добавки нет, нужно вернуть строку "Обычная газировка".

    Задача 2
    Создайте класс Triangle (треугольник), принимающий три целых значения - длины трёх сторон треугольника.

    В конструкторе нужно проверить введённые значения на корректность (например, длины не могут быть отрицательными).

    В классе должен быть описан отдельный статический метод public static boolean checkSides(int a, int b, int c), который должен проверить неравенство треугольника.

    Этот метод необходимо использовать в конструкторе.

    При провале любой из проверок нужно вывести на экран соответствующее сообщение.

    Lesson 37
    Задача 0
    Допишите проверку корректности хода пешки в файле Pawn.java на месте комментария // TODO ....

    Задача 1
    Создайте по аналогии с пешкой класс Ладья (Rook), в который добавьте все необходимые методы.

    Lesson 38
   Задача 1
   Создать класс Pet (домашнее животное). В классе должны быть:

   enum Kind для вида животного (DOG, CAT, OTHER);
   поля:
   "вид животного" (тип Kind),
   "кличка" (тип String),
   "дата рождения" (тип String),
   вес (тип double);
   конструктор, сеттеры, геттеры;
   статический метод для создания животного при прочтении данных из строки "dog,кличка", "cat,кличка,вес", "turtle,кличка,вес,дата рождения".
   Создать класс Main, в котором данные будут считываться с консоли и красиво выводиться на экран.

   Формат входных данных: количество строк с записями о домашних животных, затем сами записи в описанном формате.

   Задача 2* (не обязательно)
   Добавить в базу данных студентов чтение данных из файла.

   Задача 3** (не обязательно)
   Добавить в базу данных студентов хранение в отдельных списках для каждой группы.

   Придумать общую структуру для хранения всех групп и переработать вывод данных в формате, аналогичном вводу.

    Lesson 39
    Задача 1
    Создать класс Food (еда). В классе должны быть:

    поле "название"
    поле "калорийность"
    конструктор, геттеры, сеттеры
    метод "употребить еду" с каким-нибудь выводом
    Создать класс Drink (напиток) - наследника класса Food. В классе должны быть дополнительно:

    поле "газированный" (да/нет)
    поле "алкогольный" (да/нет)
    метод "открыть", который:
    для газированного напитка печатает "пшш",
    для негазированного - "скр",
    а для алкогольного сначала спрашивает возраст и издаёт звук, только если возраст больше 18.

    Lesson 40
    Задача 1
    Создайте класс "Человек", конструктор которого принимает имя.

    При попытке вывести объект этого класса на экран должна выводиться строка "Человек по имени ...".

    Добавьте в класс "Человек" метод "приветствие", который будет выводить строку: "Я родился!"

    Создайте классы "Мужчина" и "Женщина", которые будут наследниками класса "Человек".

    Попытка вывести их на экран должна приводить к выводу строки "Мужчина по имени ..." или "Женщина по имени ..."

    Метод "приветствие" класса "Женщина" должен выводить строку: "Я родилась!"

    Lesson 41
    Задача 1
    Создайте своё собственное исключение IncorrectWeightException и унаследуйте его от IllegalArgumentException.

    Добавьте ему конструктор, в который можно передавать одно целое число.

    При этом супер-класс IllegalArgumentException должен создаваться с сообщением об ошибке вида "Вес не может быть отрицательным: [некоректный вес]"

    Дополните файл Pizza.java из классной работы, выбросив в конструкторе исключение IncorrectWeightException при попытке создать пиццу с отрицательной массой.

    Задача 2* (не обязательно)
    Дополните файлы Pizza.java и PizzaRunner.java из классной работы (и задачи № 1).

    Добавьте классу Pizza приватный статический атрибут - максимально возможный вес пиццы.

    Добавьте классу Pizza публичный статический метод (сеттер) для изменения этого атрибута.

    При запуске программы PizzaRunner.java должна быть возможность:

    запустить программу как раньше, без аргументов, тогда ограничения нет (Или есть? подсказка: Integer.MAX_VALUE).
    запустить программу с одним аргументом командной строки: целым числом. Тогда именно это целое число и будет максимально возможным весом пиццы (в граммах).
    Примечание
    Вы также можете проверить параметр командно строки на корректность и использовать IncorrectWeightException из задачи 1 в случае некорректного запуска программы.

    Lesson 42
    Задача 1
    Допишите программу из классной работы (см. файлы Account.java и MainAccounts.java).

    Необходимо создать собственное исключение InvalidEmail.

    При попытке создать Account нужно выбрасывать собственное исключение, если в переданном адресе электронной почты нет символа '@'.

    Задача 2* (не обязательно)
    Создайте класс Rectangle (прямоугольник).

    При создании класс должен получать длины сторон. Сохраните их в памяти как поля (атрибуты) класса "длина" и "ширина".

    При попытке сравнить два прямоугольника они должны оказываться одинаковыми, если сами прямоугольники как геометрические фигуры равны - если их можно совместить, повернув и наложив друг на друга.

    Lesson 43
    Задача 1
    Создайте абстрактный класс "Дом". В качестве аргумента конструктора принимайте адрес.

    Напишите для адреса сеттер и геттер.

    Создайте классы "Частный дом" и "Многоквартирный дом" - наследники класса "Дом".

    При создании многоквартирного дома дополнительно принимайте в конструкторе целое число - количество подъездов.

    В методе toString() выводите в удобном виде всю известную информацию о доме.

    В основном файле программы создайте список домов, в который поместите два частных дома и один многоквартирный.

    Выведите информацию о домах в списке с использованием цикла for-each.

    Задача 2
    Добавьте классу "Дом" виртуальный метод "снести".

    Перезапишите этот метод в "Частном доме" и "Многоквартирном доме":

    для частного дома выводите на экран: "Вы снесли частный дом";
    для многоквартирного дома выведите на экран: "Вы снесли многоквартирный дом. %d подъездов!" Вместо %d должно быть число подъездов.
    Задача 3* (не обязательно)
    Попробуйте дописать квесту из классной работы перемещение по комнатам.

    Вариант № 1: для перемещения по карте каждой комнате можно задать координаты и хранить комнаты в двумерном списке List<List<Room>> или двумерном массиве Room[][].

    Вариант № 2: для каждой комнаты можно записать ссылки на её соседей (Room left, Room right...) и использовать существующее поле Room current класса Game.

    Lesson 44
    Задача 1
    Напишите интерфейсы "Умеет летать" CanFly с методом fly(), "Умеет бегать" CanRun с методом run и "умеет плавать" CanSwim с методом swim и реализуйте их в классе "Супермен" Superman.

    Задача 2
    Реализуйте соответствующие интерфейсы из предыдущей задачи в классах "Человек", "Утка", "Пингвин" и "Самолёт".

    Lesson 45
    Задача 1
    Создайте класс Book (книга), в конструктор которого передавайте автора, название книги и количество страниц.

    Реализуйте интерфейс для сравнения книг: они должны сортироваться по авторам, а если авторы совпадают - по названиям (и там, и там - по алфавиту, "в словарном порядке").

    Lesson 46
    Задача 1
    Используйте класс Book (книга) из предыдущего домашнего задания.

    Создайте компаратор, который позволит сортировать книги по названию, при одинаковых названиях - по автору (и там, и там - по алфавиту)

    Задача 2* (не обязательно)
    Создайте компаратор, который позволит сортировать книги по убыванию количества страниц, а при совпадающем объёме - по названиям ("по возрастанию", по алфавиту).

    Lesson 47
    Задача 1
    Напишите автотесты с использованием JUnit для задачи 1 из предыдущего домашнего задания.

    Проверьте краевые случаи, предусмотрите разные варианты.



    Lesson 48
    Задача 1
    Создать класс Rectangle (прямоугольник), которому в конструкторе нужно передавать длину и ширину.

    Написать компаратор, который сравнивает прямоугольники по площади.

    Написать тесты для этого компаратора.

    Задача 2* (не обязательно)
    Создать класс Timestamp для хранения отметки времени (точки "часы:минуты").

    У класса должны быть методы "добавить часы" и "добавить минуты", принимающий количество часов (или минут) для добавления.

    В классе должен быть реализован интерфейс Comparable, который бы сравнивал отметки времени (раньше - меньше, позже - больше).

    Примечание: считаем, что корректные отметки времени находятся только в диапазоне от 00:00 до 23:59

    Попытка добавить 1 минуту к отметке 23:59 должна приводить к установке времени на отметку 00:00.

    Написать тесты.

    Lesson 49
    Задача 1
    Создайте класс Person, которому при создании передавайте имя и дату рождения в виде строки в формате "ДД.ММ.ГГГГ".

    Реализуйте в классе интерфейс Comparable<Person>, в котором "меньше" будет значить "младше".

    Подсказка: не обязательно вычислять возраст, этому мы так и не научились. Но можно сравнивать даты рождения!

    Альтернативная подсказка: если очень хочется вычислять возраст, то можно это делать в миллисекундах с использованием getTime()!

    Lesson 50

    Lesson 51

    Lesson 52

    Lesson 53
    Решите следующие задачи с использованием класса Point из классной работы.

    Задача 1* (не обязательно)
    По введённым координатам точки определите, в какой координатной четверти (или на какой оси) она находится.

    Четверти нумеруются следующим образом:

         y
         ^
     II  |  I
    ------------> x
     III |  IV
         |
    Задача 2** (не обязательно)
    Получите от пользователя радиус окружности.

    По введённым координатам точки определите, попадает ли она внутрь, на границу или вне окружности с указанным радиусом и центром в точке O (0, 0).


    Lesson 54


    Lesson 55
    Задача 1
    Найти минимальное чётное число в последовательности положительных чисел или вывести -1, если такого числа не существует.

    Оценить временную и пространственную сложность алгоритма.

    Задача 2* (не обязательно)
    Дана последовательность слов (количество, а затем и сами слова, каждое слово с новой строки).

    Вывести все самые короткие слова через пробел.

    Оценить временную и пространственную сложность алгоритма.

    Lesson 56
    Задача 1
    Напишите метод для поиска числа в заранее отсортированном по убыванию списке различных целых чисел.

    Метод должен вернуть индекс, если элемент найден, и -1, если элемент не найден.

    Используйте в качестве образца задачу 2 из классной работы.

    Lesson 57
    Задача 1*** (не обязательно)
    Задана процентная ставка по кредиту (percent % годовых), срок кредитования (months месяцев) и сумма кредита (total евро).

    Необходимо при помощи бинарного поиска рассчитать размер аннуитетного платежа: платежи каждый месяц должны быть равными, как при обычном кредите или ипотеке.

    Каждый платёж полностью выплачивает все накопленные проценты, оставшаяся сумма идёт на погашение тела кредита.

    Это означает, что в первом месяце ваш платёж состоит почти только из начисленных процентов, а в последнем - почти только из тела кредита.

    Подсказка 1
    Воспользуйтесь бинарным поиском для размера начисляемых ежемесячно процентов (с точностью до четырёх знаков после запятой) - это не percent / 12.

    Процент должен быть таким, чтобы за 12 месяцев на сумму (с учётом начисления процентов на проценты) общая сумма долга увеличилась на percent %.

    Подсказка 2
    Подберите размер ежемесячного платежа при помощи бинарного поиска: необходимо, чтобы при выбранном размере платежа и ежемесячных процентах из подсказки
     1 количество платежей для полного погашения долга (total евро) совпадало с заданным в условии задачи (months месяцев).

    Lesson 58

    Lesson 59

    Lesson 60

















